ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bh1730.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.BH1730_WriteReg,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  24              	BH1730_WriteReg:
  25              	.LFB40:
  26              		.file 1 "Src/bh1730.c"
   1:Src/bh1730.c  **** #include "bh1730.h"
   2:Src/bh1730.c  **** 
   3:Src/bh1730.c  **** 
   4:Src/bh1730.c  **** 
   5:Src/bh1730.c  **** static void BH1730_WriteReg(uint8_t addr, uint8_t value) {
  27              		.loc 1 5 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
   6:Src/bh1730.c  ****     // uint8_t ret;
   7:Src/bh1730.c  ****     uint8_t buf[2];
   8:Src/bh1730.c  ****     // buf[0] = addr;
   9:Src/bh1730.c  ****     buf[0] = addr | BH1730_CMD;
  39              		.loc 1 9 0
  40 0004 03AA     		add	r2, sp, #12
  41 0006 8023     		movs	r3, #128
  42 0008 5B42     		rsbs	r3, r3, #0
  43 000a 1843     		orrs	r0, r3
  44              	.LVL1:
  45 000c 1070     		strb	r0, [r2]
  10:Src/bh1730.c  ****     buf[1] = value;
  46              		.loc 1 10 0
  47 000e 5170     		strb	r1, [r2, #1]
  11:Src/bh1730.c  ****     HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR , buf, 2, HAL_I2C_STATE_TIMEOUT);
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 2


  48              		.loc 1 11 0
  49 0010 2133     		adds	r3, r3, #33
  50 0012 FF33     		adds	r3, r3, #255
  51 0014 0093     		str	r3, [sp]
  52 0016 9E3B     		subs	r3, r3, #158
  53 0018 5221     		movs	r1, #82
  54              	.LVL2:
  55 001a 0248     		ldr	r0, .L2
  56 001c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
  57              	.LVL3:
  12:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR , buf, 2, HAL_I2C_STATE_TIMEOUT);
  13:Src/bh1730.c  ****     // OLED_ShowNum(0, 0, ret, 8, 12, 1);
  14:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 101, 3, 12, 1);
  15:Src/bh1730.c  ****     // OLED_Refresh();
  16:Src/bh1730.c  ****     // HAL_Delay(1000);
  17:Src/bh1730.c  ****     // OLED_Clear();
  18:Src/bh1730.c  **** }
  58              		.loc 1 18 0
  59 0020 05B0     		add	sp, sp, #20
  60              		@ sp needed
  61 0022 00BD     		pop	{pc}
  62              	.L3:
  63              		.align	2
  64              	.L2:
  65 0024 00000000 		.word	hi2c2
  66              		.cfi_endproc
  67              	.LFE40:
  69              		.section	.text.BH1730_ReadReg,"ax",%progbits
  70              		.align	2
  71              		.code	16
  72              		.thumb_func
  74              	BH1730_ReadReg:
  75              	.LFB41:
  19:Src/bh1730.c  **** 
  20:Src/bh1730.c  **** 
  21:Src/bh1730.c  **** static uint8_t BH1730_ReadReg(uint8_t addr) {
  76              		.loc 1 21 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 16
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              	.LVL4:
  81 0000 70B5     		push	{r4, r5, r6, lr}
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 4, -16
  85              		.cfi_offset 5, -12
  86              		.cfi_offset 6, -8
  87              		.cfi_offset 14, -4
  88 0002 86B0     		sub	sp, sp, #24
  89              	.LCFI3:
  90              		.cfi_def_cfa_offset 40
  91 0004 0F22     		movs	r2, #15
  92 0006 6A44     		add	r2, r2, sp
  22:Src/bh1730.c  ****     // uint8_t ret;
  23:Src/bh1730.c  ****     uint8_t value = 0;    
  93              		.loc 1 23 0
  94 0008 1724     		movs	r4, #23
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 3


  95 000a 6C44     		add	r4, r4, sp
  96 000c 0023     		movs	r3, #0
  97 000e 2370     		strb	r3, [r4]
  24:Src/bh1730.c  ****     addr = addr | BH1730_CMD;
  98              		.loc 1 24 0
  99 0010 803B     		subs	r3, r3, #128
 100 0012 1843     		orrs	r0, r3
 101              	.LVL5:
 102 0014 1070     		strb	r0, [r2]
  25:Src/bh1730.c  ****     HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, &addr, 1, HAL_I2C_STATE_TIMEOUT);     
 103              		.loc 1 25 0
 104 0016 094D     		ldr	r5, .L5
 105 0018 A026     		movs	r6, #160
 106 001a 0096     		str	r6, [sp]
 107 001c 8133     		adds	r3, r3, #129
 108 001e 5221     		movs	r1, #82
 109 0020 2800     		movs	r0, r5
 110 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 111              	.LVL6:
  26:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, &addr, 1, HAL_I2C_STATE_TIMEOUT);     
  27:Src/bh1730.c  ****     // HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, addr, 1, HAL_I2C_STATE_TIMEOUT);    
  28:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, ret, 8, 12, 1);
  29:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 102, 3, 12, 1);
  30:Src/bh1730.c  ****     // OLED_Refresh();
  31:Src/bh1730.c  ****     // HAL_Delay(1000);
  32:Src/bh1730.c  ****     // OLED_Clear(); 
  33:Src/bh1730.c  ****     HAL_I2C_Master_Receive(&hi2c2, BH1730_ADDR, &value, 1, HAL_I2C_STATE_TIMEOUT);
 112              		.loc 1 33 0
 113 0026 0096     		str	r6, [sp]
 114 0028 0123     		movs	r3, #1
 115 002a 2200     		movs	r2, r4
 116 002c 5221     		movs	r1, #82
 117 002e 2800     		movs	r0, r5
 118 0030 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 119              	.LVL7:
  34:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Receive(&hi2c2, BH1730_ADDR, &value, 1, HAL_I2C_STATE_TIMEOUT);
  35:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, ret, 8, 12, 1);
  36:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 103, 3, 12, 1);
  37:Src/bh1730.c  ****     // OLED_Refresh();
  38:Src/bh1730.c  ****     // HAL_Delay(1000);
  39:Src/bh1730.c  ****     // OLED_Clear();    
  40:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, value, 8, 12, 1);
  41:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 104, 3, 12, 1);
  42:Src/bh1730.c  ****     // OLED_Refresh();
  43:Src/bh1730.c  ****     // HAL_Delay(1000);
  44:Src/bh1730.c  ****     // OLED_Clear();
  45:Src/bh1730.c  ****     return value;
 120              		.loc 1 45 0
 121 0034 2078     		ldrb	r0, [r4]
  46:Src/bh1730.c  **** }
 122              		.loc 1 46 0
 123 0036 06B0     		add	sp, sp, #24
 124              		@ sp needed
 125 0038 70BD     		pop	{r4, r5, r6, pc}
 126              	.L6:
 127 003a C046     		.align	2
 128              	.L5:
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 4


 129 003c 00000000 		.word	hi2c2
 130              		.cfi_endproc
 131              	.LFE41:
 133              		.section	.text.setGain,"ax",%progbits
 134              		.align	2
 135              		.global	setGain
 136              		.code	16
 137              		.thumb_func
 139              	setGain:
 140              	.LFB42:
  47:Src/bh1730.c  **** 
  48:Src/bh1730.c  **** 
  49:Src/bh1730.c  **** /**
  50:Src/bh1730.c  ****  *  Set gain of the internal ADC
  51:Src/bh1730.c  ****  * 
  52:Src/bh1730.c  ****  */
  53:Src/bh1730.c  **** void setGain(uint8_t gain){
 141              		.loc 1 53 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL8:
 146 0000 10B5     		push	{r4, lr}
 147              	.LCFI4:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
  54:Src/bh1730.c  ****   if(gain == GAIN_X1){
 151              		.loc 1 54 0
 152 0002 0128     		cmp	r0, #1
 153 0004 04D1     		bne	.L8
  55:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X1_MODE); 
 154              		.loc 1 55 0
 155 0006 0021     		movs	r1, #0
 156 0008 0630     		adds	r0, r0, #6
 157              	.LVL9:
 158 000a FFF7FEFF 		bl	BH1730_WriteReg
 159              	.LVL10:
 160 000e 11E0     		b	.L7
 161              	.LVL11:
 162              	.L8:
  56:Src/bh1730.c  ****   }else if(gain == GAIN_X2){
 163              		.loc 1 56 0
 164 0010 0228     		cmp	r0, #2
 165 0012 04D1     		bne	.L10
  57:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X2_MODE); 
 166              		.loc 1 57 0
 167 0014 0121     		movs	r1, #1
 168 0016 0530     		adds	r0, r0, #5
 169              	.LVL12:
 170 0018 FFF7FEFF 		bl	BH1730_WriteReg
 171              	.LVL13:
 172 001c 0AE0     		b	.L7
 173              	.LVL14:
 174              	.L10:
  58:Src/bh1730.c  ****   }else if(gain == GAIN_X64){
 175              		.loc 1 58 0
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 5


 176 001e 4028     		cmp	r0, #64
 177 0020 04D1     		bne	.L11
  59:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X64_MODE); 
 178              		.loc 1 59 0
 179 0022 0221     		movs	r1, #2
 180 0024 3938     		subs	r0, r0, #57
 181              	.LVL15:
 182 0026 FFF7FEFF 		bl	BH1730_WriteReg
 183              	.LVL16:
 184 002a 03E0     		b	.L7
 185              	.LVL17:
 186              	.L11:
  60:Src/bh1730.c  ****   }
  61:Src/bh1730.c  ****   else{
  62:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X128_MODE); 
 187              		.loc 1 62 0
 188 002c 0321     		movs	r1, #3
 189 002e 0720     		movs	r0, #7
 190              	.LVL18:
 191 0030 FFF7FEFF 		bl	BH1730_WriteReg
 192              	.LVL19:
 193              	.L7:
  63:Src/bh1730.c  ****   }
  64:Src/bh1730.c  **** //   // else if(gain == GAIN_X128){
  65:Src/bh1730.c  **** //   //   BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X128_MODE); 
  66:Src/bh1730.c  **** //   // }
  67:Src/bh1730.c  **** //   // else {
  68:Src/bh1730.c  **** //   // #if BH1730_DEBUG == 1
  69:Src/bh1730.c  **** //   //   Serial.println("Gain invalid");
  70:Src/bh1730.c  **** //   // #endif
  71:Src/bh1730.c  **** //   //   return;
  72:Src/bh1730.c  **** //   // }
  73:Src/bh1730.c  **** //   // BH1730_GAIN gain = gain;
  74:Src/bh1730.c  **** }
 194              		.loc 1 74 0
 195              		@ sp needed
 196 0034 10BD     		pop	{r4, pc}
 197              		.cfi_endproc
 198              	.LFE42:
 200              		.global	__aeabi_uidiv
 201              		.global	__aeabi_ui2d
 202              		.global	__aeabi_dcmplt
 203              		.global	__aeabi_i2d
 204              		.global	__aeabi_dmul
 205              		.global	__aeabi_dsub
 206              		.global	__aeabi_ddiv
 207              		.global	__aeabi_d2uiz
 208 0036 C046     		.section	.text.BH1730_GetLux,"ax",%progbits
 209              		.align	2
 210              		.global	BH1730_GetLux
 211              		.code	16
 212              		.thumb_func
 214              	BH1730_GetLux:
 215              	.LFB43:
  75:Src/bh1730.c  **** 
  76:Src/bh1730.c  **** /**
  77:Src/bh1730.c  ****  * Read lux level from sensor.
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 6


  78:Src/bh1730.c  ****  * Returns -1 if read is timed out
  79:Src/bh1730.c  ****  * 
  80:Src/bh1730.c  ****  */
  81:Src/bh1730.c  **** uint32_t BH1730_GetLux() {
 216              		.loc 1 81 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 221              	.LCFI5:
 222              		.cfi_def_cfa_offset 24
 223              		.cfi_offset 3, -24
 224              		.cfi_offset 4, -20
 225              		.cfi_offset 5, -16
 226              		.cfi_offset 6, -12
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229              	.LVL20:
  82:Src/bh1730.c  ****     
  83:Src/bh1730.c  ****   // set accuracy
  84:Src/bh1730.c  ****   uint8_t gain = GAIN_X1;
  85:Src/bh1730.c  **** 
  86:Src/bh1730.c  ****   // set Gain
  87:Src/bh1730.c  ****   setGain(gain);
 230              		.loc 1 87 0
 231 0002 0120     		movs	r0, #1
 232 0004 FFF7FEFF 		bl	setGain
 233              	.LVL21:
  88:Src/bh1730.c  **** 
  89:Src/bh1730.c  ****   // Start one time measurement
  90:Src/bh1730.c  ****   BH1730_WriteReg(BH1730_REG_CONTROL, BH1730_REG_CONTROL_POWER | BH1730_REG_CONTROL_ADC_EN | BH1730
 234              		.loc 1 90 0
 235 0008 0B21     		movs	r1, #11
 236 000a 0020     		movs	r0, #0
 237 000c FFF7FEFF 		bl	BH1730_WriteReg
 238              	.LVL22:
  91:Src/bh1730.c  ****   // uint8_t buf[2];
  92:Src/bh1730.c  ****   // buf[0] = (uint8_t) 0x80;
  93:Src/bh1730.c  ****   // buf[1] = (uint8_t) 0x0C;
  94:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, buf, 2, HAL_I2C_STATE_TIMEOUT);  
  95:Src/bh1730.c  ****   // HAL_Delay(10);
  96:Src/bh1730.c  **** 
  97:Src/bh1730.c  ****   // uint8_t value = 0; 
  98:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, ((uint8_t)0x14), 1, HAL_I2C_STATE_TIMEOUT);  
  99:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, 0x14, 1, HAL_I2C_STATE_TIMEOUT);  
 100:Src/bh1730.c  ****   // HAL_I2C_Master_Receive(&hi2c2, 0x52, &value, 1, HAL_I2C_STATE_TIMEOUT);
 101:Src/bh1730.c  ****   // BH1730_ReadReg(BH1730_REG_DATA0_LOW);
 102:Src/bh1730.c  ****   // OLED_ShowNum(0, 16, value, 8, 12, 1);
 103:Src/bh1730.c  ****   // OLED_ShowNum(0, 32, 105, 3, 12, 1);
 104:Src/bh1730.c  ****   // OLED_Refresh();
 105:Src/bh1730.c  ****   // HAL_Delay(1000);
 106:Src/bh1730.c  ****   // OLED_Clear(); 
 107:Src/bh1730.c  **** 
 108:Src/bh1730.c  ****   // Wait for ADC data is valid
 109:Src/bh1730.c  **** 
 110:Src/bh1730.c  ****   // while(((read8(BH1730_REG_CONTROL) & BH1730_REG_CONTROL_ADC_VALID) == 0) && ++ret < BH1730_RET_
 111:Src/bh1730.c  ****   // HAL_Delay(10);
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 7


 112:Src/bh1730.c  ****   //   // delay(10);
 113:Src/bh1730.c  ****   // }
 114:Src/bh1730.c  **** 
 115:Src/bh1730.c  ****   // if(ret == BH1730_RET_TIMEOUT){
 116:Src/bh1730.c  ****   // #if BH1730_DEBUG == 1
 117:Src/bh1730.c  ****   //   Serial.println("Read timed out");
 118:Src/bh1730.c  ****   // #endif
 119:Src/bh1730.c  ****   //   return -1;
 120:Src/bh1730.c  ****   // }
 121:Src/bh1730.c  **** 
 122:Src/bh1730.c  ****   // Read real light and IR light from registers  
 123:Src/bh1730.c  ****   // uint32_t result;
 124:Src/bh1730.c  ****   uint8_t data0_lb, data0_mb, data1_lb, data1_mb;
 125:Src/bh1730.c  ****   data0_lb = BH1730_ReadReg(BH1730_REG_DATA0_LOW);
 239              		.loc 1 125 0
 240 0010 1420     		movs	r0, #20
 241 0012 FFF7FEFF 		bl	BH1730_ReadReg
 242              	.LVL23:
 243 0016 0500     		movs	r5, r0
 244              	.LVL24:
 126:Src/bh1730.c  ****   data0_mb = BH1730_ReadReg(BH1730_REG_DATA0_HIGH);
 245              		.loc 1 126 0
 246 0018 1520     		movs	r0, #21
 247 001a FFF7FEFF 		bl	BH1730_ReadReg
 248              	.LVL25:
 249 001e 0400     		movs	r4, r0
 250              	.LVL26:
 127:Src/bh1730.c  ****   data1_lb = BH1730_ReadReg(BH1730_REG_DATA1_LOW); 
 251              		.loc 1 127 0
 252 0020 1620     		movs	r0, #22
 253 0022 FFF7FEFF 		bl	BH1730_ReadReg
 254              	.LVL27:
 255 0026 0600     		movs	r6, r0
 256              	.LVL28:
 128:Src/bh1730.c  ****   data1_mb = BH1730_ReadReg(BH1730_REG_DATA1_HIGH); 
 257              		.loc 1 128 0
 258 0028 1720     		movs	r0, #23
 259 002a FFF7FEFF 		bl	BH1730_ReadReg
 260              	.LVL29:
 129:Src/bh1730.c  **** 
 130:Src/bh1730.c  ****   // OLED_ShowNum(0, 0, data0_lb, 8, 12, 1);
 131:Src/bh1730.c  ****   // OLED_Refresh();
 132:Src/bh1730.c  ****   // HAL_Delay(1000);
 133:Src/bh1730.c  ****   // OLED_Clear();
 134:Src/bh1730.c  ****   // Calculate lux based on formula in datasheet.
 135:Src/bh1730.c  ****   uint16_t data0, data1;
 136:Src/bh1730.c  ****   data0 = (data0_mb << 8 ) + data0_lb;
 261              		.loc 1 136 0
 262 002e 2402     		lsls	r4, r4, #8
 263              	.LVL30:
 264 0030 6519     		adds	r5, r4, r5
 265              	.LVL31:
 266 0032 ACB2     		uxth	r4, r5
 267              	.LVL32:
 137:Src/bh1730.c  ****   data1 = (data1_mb << 8 ) + data1_lb;
 268              		.loc 1 137 0
 269 0034 0502     		lsls	r5, r0, #8
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 8


 270 0036 AE19     		adds	r6, r5, r6
 271              	.LVL33:
 272 0038 B5B2     		uxth	r5, r6
 273              	.LVL34:
 138:Src/bh1730.c  ****   // OLED_ShowNum(0, 0, data0, 9, 12, 1);
 139:Src/bh1730.c  ****   // OLED_ShowNum(0, 22, data1, 9, 12, 1);
 140:Src/bh1730.c  ****   // OLED_Refresh();
 141:Src/bh1730.c  ****   // HAL_Delay(1000);
 142:Src/bh1730.c  ****   // OLED_Clear();
 143:Src/bh1730.c  **** 
 144:Src/bh1730.c  ****   if(data0 == 0)return 0;
 274              		.loc 1 144 0
 275 003a 002C     		cmp	r4, #0
 276 003c 00D1     		bne	.LCB213
 277 003e AAE0     		b	.L21	@long jump
 278              	.LCB213:
 279              	.LVL35:
 145:Src/bh1730.c  ****   
 146:Src/bh1730.c  ****   uint32_t lx = 0;
 147:Src/bh1730.c  ****   uint32_t div = data1/data0;
 280              		.loc 1 147 0
 281 0040 2100     		movs	r1, r4
 282 0042 2800     		movs	r0, r5
 283              	.LVL36:
 284 0044 FFF7FEFF 		bl	__aeabi_uidiv
 285              	.LVL37:
 286 0048 80B2     		uxth	r0, r0
 287              	.LVL38:
 148:Src/bh1730.c  **** 
 149:Src/bh1730.c  **** 
 150:Src/bh1730.c  ****   if(div < 0.26) {
 288              		.loc 1 150 0
 289 004a FFF7FEFF 		bl	__aeabi_ui2d
 290              	.LVL39:
 291 004e 0600     		movs	r6, r0
 292 0050 0F00     		movs	r7, r1
 293 0052 534A     		ldr	r2, .L31
 294 0054 534B     		ldr	r3, .L31+4
 295 0056 FFF7FEFF 		bl	__aeabi_dcmplt
 296              	.LVL40:
 297 005a 0028     		cmp	r0, #0
 298 005c 20D0     		beq	.L27
 151:Src/bh1730.c  ****       lx = ((1.29 * data0) - (2.733 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 299              		.loc 1 151 0
 300 005e 2000     		movs	r0, r4
 301 0060 FFF7FEFF 		bl	__aeabi_i2d
 302              	.LVL41:
 303 0064 4E4A     		ldr	r2, .L31
 304 0066 504B     		ldr	r3, .L31+8
 305 0068 FFF7FEFF 		bl	__aeabi_dmul
 306              	.LVL42:
 307 006c 0600     		movs	r6, r0
 308 006e 0F00     		movs	r7, r1
 309 0070 2800     		movs	r0, r5
 310 0072 FFF7FEFF 		bl	__aeabi_i2d
 311              	.LVL43:
 312 0076 4D4A     		ldr	r2, .L31+12
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 9


 313 0078 4D4B     		ldr	r3, .L31+16
 314 007a FFF7FEFF 		bl	__aeabi_dmul
 315              	.LVL44:
 316 007e 0200     		movs	r2, r0
 317 0080 0B00     		movs	r3, r1
 318 0082 3000     		movs	r0, r6
 319 0084 3900     		movs	r1, r7
 320 0086 FFF7FEFF 		bl	__aeabi_dsub
 321              	.LVL45:
 322 008a 4A4A     		ldr	r2, .L31+20
 323 008c 4A4B     		ldr	r3, .L31+24
 324 008e FFF7FEFF 		bl	__aeabi_dmul
 325              	.LVL46:
 326 0092 4A4A     		ldr	r2, .L31+28
 327 0094 4A4B     		ldr	r3, .L31+32
 328 0096 FFF7FEFF 		bl	__aeabi_ddiv
 329              	.LVL47:
 330 009a FFF7FEFF 		bl	__aeabi_d2uiz
 331              	.LVL48:
 332 009e 7DE0     		b	.L13
 333              	.LVL49:
 334              	.L27:
 152:Src/bh1730.c  ****   }else if(div < 0.55) {
 335              		.loc 1 152 0
 336 00a0 484A     		ldr	r2, .L31+36
 337 00a2 494B     		ldr	r3, .L31+40
 338 00a4 3000     		movs	r0, r6
 339 00a6 3900     		movs	r1, r7
 340 00a8 FFF7FEFF 		bl	__aeabi_dcmplt
 341              	.LVL50:
 342 00ac 0028     		cmp	r0, #0
 343 00ae 20D0     		beq	.L28
 153:Src/bh1730.c  ****       lx = ((0.795 * data0) - (0.859 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 344              		.loc 1 153 0
 345 00b0 2000     		movs	r0, r4
 346 00b2 FFF7FEFF 		bl	__aeabi_i2d
 347              	.LVL51:
 348 00b6 454A     		ldr	r2, .L31+44
 349 00b8 454B     		ldr	r3, .L31+48
 350 00ba FFF7FEFF 		bl	__aeabi_dmul
 351              	.LVL52:
 352 00be 0600     		movs	r6, r0
 353 00c0 0F00     		movs	r7, r1
 354 00c2 2800     		movs	r0, r5
 355 00c4 FFF7FEFF 		bl	__aeabi_i2d
 356              	.LVL53:
 357 00c8 424A     		ldr	r2, .L31+52
 358 00ca 434B     		ldr	r3, .L31+56
 359 00cc FFF7FEFF 		bl	__aeabi_dmul
 360              	.LVL54:
 361 00d0 0200     		movs	r2, r0
 362 00d2 0B00     		movs	r3, r1
 363 00d4 3000     		movs	r0, r6
 364 00d6 3900     		movs	r1, r7
 365 00d8 FFF7FEFF 		bl	__aeabi_dsub
 366              	.LVL55:
 367 00dc 354A     		ldr	r2, .L31+20
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 10


 368 00de 364B     		ldr	r3, .L31+24
 369 00e0 FFF7FEFF 		bl	__aeabi_dmul
 370              	.LVL56:
 371 00e4 354A     		ldr	r2, .L31+28
 372 00e6 364B     		ldr	r3, .L31+32
 373 00e8 FFF7FEFF 		bl	__aeabi_ddiv
 374              	.LVL57:
 375 00ec FFF7FEFF 		bl	__aeabi_d2uiz
 376              	.LVL58:
 377 00f0 54E0     		b	.L13
 378              	.LVL59:
 379              	.L28:
 154:Src/bh1730.c  ****   }else if(div < 1.09) {
 380              		.loc 1 154 0
 381 00f2 364A     		ldr	r2, .L31+44
 382 00f4 394B     		ldr	r3, .L31+60
 383 00f6 3000     		movs	r0, r6
 384 00f8 3900     		movs	r1, r7
 385 00fa FFF7FEFF 		bl	__aeabi_dcmplt
 386              	.LVL60:
 387 00fe 0028     		cmp	r0, #0
 388 0100 20D0     		beq	.L29
 155:Src/bh1730.c  ****       lx = ((0.51 * data0) - (0.345 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 389              		.loc 1 155 0
 390 0102 2000     		movs	r0, r4
 391 0104 FFF7FEFF 		bl	__aeabi_i2d
 392              	.LVL61:
 393 0108 354A     		ldr	r2, .L31+64
 394 010a 364B     		ldr	r3, .L31+68
 395 010c FFF7FEFF 		bl	__aeabi_dmul
 396              	.LVL62:
 397 0110 0600     		movs	r6, r0
 398 0112 0F00     		movs	r7, r1
 399 0114 2800     		movs	r0, r5
 400 0116 FFF7FEFF 		bl	__aeabi_i2d
 401              	.LVL63:
 402 011a 334A     		ldr	r2, .L31+72
 403 011c 334B     		ldr	r3, .L31+76
 404 011e FFF7FEFF 		bl	__aeabi_dmul
 405              	.LVL64:
 406 0122 0200     		movs	r2, r0
 407 0124 0B00     		movs	r3, r1
 408 0126 3000     		movs	r0, r6
 409 0128 3900     		movs	r1, r7
 410 012a FFF7FEFF 		bl	__aeabi_dsub
 411              	.LVL65:
 412 012e 214A     		ldr	r2, .L31+20
 413 0130 214B     		ldr	r3, .L31+24
 414 0132 FFF7FEFF 		bl	__aeabi_dmul
 415              	.LVL66:
 416 0136 214A     		ldr	r2, .L31+28
 417 0138 214B     		ldr	r3, .L31+32
 418 013a FFF7FEFF 		bl	__aeabi_ddiv
 419              	.LVL67:
 420 013e FFF7FEFF 		bl	__aeabi_d2uiz
 421              	.LVL68:
 422 0142 2BE0     		b	.L13
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 11


 423              	.LVL69:
 424              	.L29:
 156:Src/bh1730.c  ****   }else if(div < 2.13) {
 425              		.loc 1 156 0
 426 0144 2A4A     		ldr	r2, .L31+80
 427 0146 2B4B     		ldr	r3, .L31+84
 428 0148 3000     		movs	r0, r6
 429 014a 3900     		movs	r1, r7
 430 014c FFF7FEFF 		bl	__aeabi_dcmplt
 431              	.LVL70:
 432 0150 0028     		cmp	r0, #0
 433 0152 22D0     		beq	.L30
 157:Src/bh1730.c  ****       lx = ((0.276 * data0) - (0.13 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 434              		.loc 1 157 0
 435 0154 2000     		movs	r0, r4
 436 0156 FFF7FEFF 		bl	__aeabi_i2d
 437              	.LVL71:
 438 015a 274A     		ldr	r2, .L31+88
 439 015c 274B     		ldr	r3, .L31+92
 440 015e FFF7FEFF 		bl	__aeabi_dmul
 441              	.LVL72:
 442 0162 0600     		movs	r6, r0
 443 0164 0F00     		movs	r7, r1
 444 0166 2800     		movs	r0, r5
 445 0168 FFF7FEFF 		bl	__aeabi_i2d
 446              	.LVL73:
 447 016c 0C4A     		ldr	r2, .L31
 448 016e 244B     		ldr	r3, .L31+96
 449 0170 FFF7FEFF 		bl	__aeabi_dmul
 450              	.LVL74:
 451 0174 0200     		movs	r2, r0
 452 0176 0B00     		movs	r3, r1
 453 0178 3000     		movs	r0, r6
 454 017a 3900     		movs	r1, r7
 455 017c FFF7FEFF 		bl	__aeabi_dsub
 456              	.LVL75:
 457 0180 0C4A     		ldr	r2, .L31+20
 458 0182 0D4B     		ldr	r3, .L31+24
 459 0184 FFF7FEFF 		bl	__aeabi_dmul
 460              	.LVL76:
 461 0188 0C4A     		ldr	r2, .L31+28
 462 018a 0D4B     		ldr	r3, .L31+32
 463 018c FFF7FEFF 		bl	__aeabi_ddiv
 464              	.LVL77:
 465 0190 FFF7FEFF 		bl	__aeabi_d2uiz
 466              	.LVL78:
 467 0194 02E0     		b	.L13
 468              	.LVL79:
 469              	.L21:
 144:Src/bh1730.c  ****   
 470              		.loc 1 144 0
 471 0196 0020     		movs	r0, #0
 472              	.LVL80:
 473 0198 00E0     		b	.L13
 474              	.LVL81:
 475              	.L30:
 146:Src/bh1730.c  ****   uint32_t div = data1/data0;
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 12


 476              		.loc 1 146 0
 477 019a 0020     		movs	r0, #0
 478              	.LVL82:
 479              	.L13:
 158:Src/bh1730.c  ****   }
 159:Src/bh1730.c  **** 
 160:Src/bh1730.c  ****   return lx;
 161:Src/bh1730.c  **** }...
 480              		.loc 1 161 0
 481              		@ sp needed
 482              	.LVL83:
 483              	.LVL84:
 484 019c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 485              	.L32:
 486 019e C046     		.align	2
 487              	.L31:
 488 01a0 A4703D0A 		.word	171798692
 489 01a4 D7A3D03F 		.word	1070638039
 490 01a8 D7A3F43F 		.word	1072997335
 491 01ac 77BE9F1A 		.word	446676599
 492 01b0 2FDD0540 		.word	1074126127
 493 01b4 66666666 		.word	1717986918
 494 01b8 66A65940 		.word	1079617126
 495 01bc 4DF38E53 		.word	1401877325
 496 01c0 74A45940 		.word	1079616628
 497 01c4 9A999999 		.word	-1717986918
 498 01c8 9999E13F 		.word	1071749529
 499 01cc 713D0AD7 		.word	-687194767
 500 01d0 A370E93F 		.word	1072263331
 501 01d4 B0726891 		.word	-1855425872
 502 01d8 ED7CEB3F 		.word	1072397549
 503 01dc A370F13F 		.word	1072787619
 504 01e0 52B81E85 		.word	-2061584302
 505 01e4 EB51E03F 		.word	1071665643
 506 01e8 14AE47E1 		.word	-515396076
 507 01ec 7A14D63F 		.word	1070994554
 508 01f0 0AD7A370 		.word	1889785610
 509 01f4 3D0A0140 		.word	1073809981
 510 01f8 448B6CE7 		.word	-412316860
 511 01fc FBA9D13F 		.word	1070705147
 512 0200 D7A3C03F 		.word	1069589463
 513              		.cfi_endproc
 514              	.LFE43:
 516              		.text
 517              	.Letext0:
 518              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 519              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 520              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x8.h"
 521              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 522              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 523              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 524              		.file 8 "Inc/i2c.h"
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 bh1730.c
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:20     .text.BH1730_WriteReg:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:24     .text.BH1730_WriteReg:00000000 BH1730_WriteReg
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:65     .text.BH1730_WriteReg:00000024 $d
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:70     .text.BH1730_ReadReg:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:74     .text.BH1730_ReadReg:00000000 BH1730_ReadReg
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:129    .text.BH1730_ReadReg:0000003c $d
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:134    .text.setGain:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:139    .text.setGain:00000000 setGain
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:209    .text.BH1730_GetLux:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:214    .text.BH1730_GetLux:00000000 BH1730_GetLux
C:\Users\bnusw\AppData\Local\Temp\cc8wXKM8.s:488    .text.BH1730_GetLux:000001a0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_I2C_Master_Transmit
hi2c2
HAL_I2C_Master_Receive
__aeabi_uidiv
__aeabi_ui2d
__aeabi_dcmplt
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_d2uiz
