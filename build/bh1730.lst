ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bh1730.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.BH1730_WriteReg,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  24              	BH1730_WriteReg:
  25              	.LFB40:
  26              		.file 1 "Src/bh1730.c"
   1:Src/bh1730.c  **** #include "bh1730.h"
   2:Src/bh1730.c  **** 
   3:Src/bh1730.c  **** 
   4:Src/bh1730.c  **** 
   5:Src/bh1730.c  **** static void BH1730_WriteReg(uint8_t addr, uint8_t value) {
  27              		.loc 1 5 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
   6:Src/bh1730.c  ****     // uint8_t ret;
   7:Src/bh1730.c  ****     uint8_t buf[2];
   8:Src/bh1730.c  ****     // buf[0] = addr;
   9:Src/bh1730.c  ****     buf[0] = addr | BH1730_CMD;
  39              		.loc 1 9 0
  40 0004 03AA     		add	r2, sp, #12
  41 0006 8023     		movs	r3, #128
  42 0008 5B42     		rsbs	r3, r3, #0
  43 000a 1843     		orrs	r0, r3
  44              	.LVL1:
  45 000c 1070     		strb	r0, [r2]
  10:Src/bh1730.c  ****     buf[1] = value;
  46              		.loc 1 10 0
  47 000e 5170     		strb	r1, [r2, #1]
  11:Src/bh1730.c  ****     HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR , buf, 2, HAL_I2C_STATE_TIMEOUT);
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 2


  48              		.loc 1 11 0
  49 0010 2133     		adds	r3, r3, #33
  50 0012 FF33     		adds	r3, r3, #255
  51 0014 0093     		str	r3, [sp]
  52 0016 9E3B     		subs	r3, r3, #158
  53 0018 5221     		movs	r1, #82
  54              	.LVL2:
  55 001a 0248     		ldr	r0, .L2
  56 001c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
  57              	.LVL3:
  12:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR , buf, 2, HAL_I2C_STATE_TIMEOUT);
  13:Src/bh1730.c  ****     // OLED_ShowNum(0, 0, ret, 8, 12, 1);
  14:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 101, 3, 12, 1);
  15:Src/bh1730.c  ****     // OLED_Refresh();
  16:Src/bh1730.c  ****     // HAL_Delay(1000);
  17:Src/bh1730.c  ****     // OLED_Clear();
  18:Src/bh1730.c  **** }
  58              		.loc 1 18 0
  59 0020 05B0     		add	sp, sp, #20
  60              		@ sp needed
  61 0022 00BD     		pop	{pc}
  62              	.L3:
  63              		.align	2
  64              	.L2:
  65 0024 00000000 		.word	hi2c2
  66              		.cfi_endproc
  67              	.LFE40:
  69              		.section	.text.BH1730_ReadReg,"ax",%progbits
  70              		.align	2
  71              		.code	16
  72              		.thumb_func
  74              	BH1730_ReadReg:
  75              	.LFB41:
  19:Src/bh1730.c  **** 
  20:Src/bh1730.c  **** 
  21:Src/bh1730.c  **** static uint8_t BH1730_ReadReg(uint8_t addr) {
  76              		.loc 1 21 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 16
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              	.LVL4:
  81 0000 70B5     		push	{r4, r5, r6, lr}
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 4, -16
  85              		.cfi_offset 5, -12
  86              		.cfi_offset 6, -8
  87              		.cfi_offset 14, -4
  88 0002 86B0     		sub	sp, sp, #24
  89              	.LCFI3:
  90              		.cfi_def_cfa_offset 40
  91 0004 0F22     		movs	r2, #15
  92 0006 6A44     		add	r2, r2, sp
  22:Src/bh1730.c  ****     // uint8_t ret;
  23:Src/bh1730.c  ****     uint8_t value = 0;    
  93              		.loc 1 23 0
  94 0008 1724     		movs	r4, #23
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 3


  95 000a 6C44     		add	r4, r4, sp
  96 000c 0023     		movs	r3, #0
  97 000e 2370     		strb	r3, [r4]
  24:Src/bh1730.c  ****     addr = addr | BH1730_CMD;
  98              		.loc 1 24 0
  99 0010 803B     		subs	r3, r3, #128
 100 0012 1843     		orrs	r0, r3
 101              	.LVL5:
 102 0014 1070     		strb	r0, [r2]
  25:Src/bh1730.c  ****     HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, &addr, 1, HAL_I2C_STATE_TIMEOUT);     
 103              		.loc 1 25 0
 104 0016 094D     		ldr	r5, .L5
 105 0018 A026     		movs	r6, #160
 106 001a 0096     		str	r6, [sp]
 107 001c 8133     		adds	r3, r3, #129
 108 001e 5221     		movs	r1, #82
 109 0020 2800     		movs	r0, r5
 110 0022 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 111              	.LVL6:
  26:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, &addr, 1, HAL_I2C_STATE_TIMEOUT);     
  27:Src/bh1730.c  ****     // HAL_I2C_Master_Transmit(&hi2c2, BH1730_ADDR, addr, 1, HAL_I2C_STATE_TIMEOUT);    
  28:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, ret, 8, 12, 1);
  29:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 102, 3, 12, 1);
  30:Src/bh1730.c  ****     // OLED_Refresh();
  31:Src/bh1730.c  ****     // HAL_Delay(1000);
  32:Src/bh1730.c  ****     // OLED_Clear(); 
  33:Src/bh1730.c  ****     HAL_I2C_Master_Receive(&hi2c2, BH1730_ADDR, &value, 1, HAL_I2C_STATE_TIMEOUT);
 112              		.loc 1 33 0
 113 0026 0096     		str	r6, [sp]
 114 0028 0123     		movs	r3, #1
 115 002a 2200     		movs	r2, r4
 116 002c 5221     		movs	r1, #82
 117 002e 2800     		movs	r0, r5
 118 0030 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 119              	.LVL7:
  34:Src/bh1730.c  ****     // ret = HAL_I2C_Master_Receive(&hi2c2, BH1730_ADDR, &value, 1, HAL_I2C_STATE_TIMEOUT);
  35:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, ret, 8, 12, 1);
  36:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 103, 3, 12, 1);
  37:Src/bh1730.c  ****     // OLED_Refresh();
  38:Src/bh1730.c  ****     // HAL_Delay(1000);
  39:Src/bh1730.c  ****     // OLED_Clear();    
  40:Src/bh1730.c  ****     // OLED_ShowNum(0, 16, value, 8, 12, 1);
  41:Src/bh1730.c  ****     // OLED_ShowNum(0, 32, 104, 3, 12, 1);
  42:Src/bh1730.c  ****     // OLED_Refresh();
  43:Src/bh1730.c  ****     // HAL_Delay(1000);
  44:Src/bh1730.c  ****     // OLED_Clear();
  45:Src/bh1730.c  ****     return value;
 120              		.loc 1 45 0
 121 0034 2078     		ldrb	r0, [r4]
  46:Src/bh1730.c  **** }
 122              		.loc 1 46 0
 123 0036 06B0     		add	sp, sp, #24
 124              		@ sp needed
 125 0038 70BD     		pop	{r4, r5, r6, pc}
 126              	.L6:
 127 003a C046     		.align	2
 128              	.L5:
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 4


 129 003c 00000000 		.word	hi2c2
 130              		.cfi_endproc
 131              	.LFE41:
 133              		.section	.text.BH1730_init,"ax",%progbits
 134              		.align	2
 135              		.global	BH1730_init
 136              		.code	16
 137              		.thumb_func
 139              	BH1730_init:
 140              	.LFB42:
  47:Src/bh1730.c  **** 
  48:Src/bh1730.c  **** 
  49:Src/bh1730.c  **** void BH1730_init(void){
 141              		.loc 1 49 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 10B5     		push	{r4, lr}
 146              	.LCFI4:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 4, -8
 149              		.cfi_offset 14, -4
  50:Src/bh1730.c  ****   BH1730_WriteReg(BH1730_CMD_SPECIAL | BH1730_CMD_SPECIAL_SOFT_RESET, (1<<7)); 
 150              		.loc 1 50 0
 151 0002 8021     		movs	r1, #128
 152 0004 6420     		movs	r0, #100
 153 0006 FFF7FEFF 		bl	BH1730_WriteReg
 154              	.LVL8:
  51:Src/bh1730.c  **** }
 155              		.loc 1 51 0
 156              		@ sp needed
 157 000a 10BD     		pop	{r4, pc}
 158              		.cfi_endproc
 159              	.LFE42:
 161              		.section	.text.setGain,"ax",%progbits
 162              		.align	2
 163              		.global	setGain
 164              		.code	16
 165              		.thumb_func
 167              	setGain:
 168              	.LFB43:
  52:Src/bh1730.c  **** 
  53:Src/bh1730.c  **** /**
  54:Src/bh1730.c  ****  *  Set gain of the internal ADC
  55:Src/bh1730.c  ****  * 
  56:Src/bh1730.c  ****  */
  57:Src/bh1730.c  **** void setGain(uint8_t gain){
 169              		.loc 1 57 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL9:
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 5


  58:Src/bh1730.c  ****   if(gain == GAIN_X1){
 179              		.loc 1 58 0
 180 0002 0128     		cmp	r0, #1
 181 0004 04D1     		bne	.L9
  59:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X1_MODE); 
 182              		.loc 1 59 0
 183 0006 0021     		movs	r1, #0
 184 0008 0630     		adds	r0, r0, #6
 185              	.LVL10:
 186 000a FFF7FEFF 		bl	BH1730_WriteReg
 187              	.LVL11:
 188 000e 11E0     		b	.L8
 189              	.LVL12:
 190              	.L9:
  60:Src/bh1730.c  ****   }else if(gain == GAIN_X2){
 191              		.loc 1 60 0
 192 0010 0228     		cmp	r0, #2
 193 0012 04D1     		bne	.L11
  61:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X2_MODE); 
 194              		.loc 1 61 0
 195 0014 0121     		movs	r1, #1
 196 0016 0530     		adds	r0, r0, #5
 197              	.LVL13:
 198 0018 FFF7FEFF 		bl	BH1730_WriteReg
 199              	.LVL14:
 200 001c 0AE0     		b	.L8
 201              	.LVL15:
 202              	.L11:
  62:Src/bh1730.c  ****   }else if(gain == GAIN_X64){
 203              		.loc 1 62 0
 204 001e 4028     		cmp	r0, #64
 205 0020 04D1     		bne	.L12
  63:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X64_MODE); 
 206              		.loc 1 63 0
 207 0022 0221     		movs	r1, #2
 208 0024 3938     		subs	r0, r0, #57
 209              	.LVL16:
 210 0026 FFF7FEFF 		bl	BH1730_WriteReg
 211              	.LVL17:
 212 002a 03E0     		b	.L8
 213              	.LVL18:
 214              	.L12:
  64:Src/bh1730.c  ****   }
  65:Src/bh1730.c  ****   else{
  66:Src/bh1730.c  ****     BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X128_MODE); 
 215              		.loc 1 66 0
 216 002c 0321     		movs	r1, #3
 217 002e 0720     		movs	r0, #7
 218              	.LVL19:
 219 0030 FFF7FEFF 		bl	BH1730_WriteReg
 220              	.LVL20:
 221              	.L8:
  67:Src/bh1730.c  ****   }
  68:Src/bh1730.c  **** //   // else if(gain == GAIN_X128){
  69:Src/bh1730.c  **** //   //   BH1730_WriteReg(BH1730_REG_GAIN, BH1730_GAIN_X128_MODE); 
  70:Src/bh1730.c  **** //   // }
  71:Src/bh1730.c  **** //   // else {
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 6


  72:Src/bh1730.c  **** //   // #if BH1730_DEBUG == 1
  73:Src/bh1730.c  **** //   //   Serial.println("Gain invalid");
  74:Src/bh1730.c  **** //   // #endif
  75:Src/bh1730.c  **** //   //   return;
  76:Src/bh1730.c  **** //   // }
  77:Src/bh1730.c  **** //   // BH1730_GAIN gain = gain;
  78:Src/bh1730.c  **** }
 222              		.loc 1 78 0
 223              		@ sp needed
 224 0034 10BD     		pop	{r4, pc}
 225              		.cfi_endproc
 226              	.LFE43:
 228              		.global	__aeabi_uidiv
 229              		.global	__aeabi_ui2d
 230              		.global	__aeabi_dcmplt
 231              		.global	__aeabi_i2d
 232              		.global	__aeabi_dmul
 233              		.global	__aeabi_dsub
 234              		.global	__aeabi_ddiv
 235              		.global	__aeabi_d2uiz
 236 0036 C046     		.section	.text.BH1730_GetLux,"ax",%progbits
 237              		.align	2
 238              		.global	BH1730_GetLux
 239              		.code	16
 240              		.thumb_func
 242              	BH1730_GetLux:
 243              	.LFB44:
  79:Src/bh1730.c  **** 
  80:Src/bh1730.c  **** /**
  81:Src/bh1730.c  ****  * Read lux level from sensor.
  82:Src/bh1730.c  ****  * Returns -1 if read is timed out
  83:Src/bh1730.c  ****  * 
  84:Src/bh1730.c  ****  */
  85:Src/bh1730.c  **** uint32_t BH1730_GetLux() {
 244              		.loc 1 85 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 24
 251              		.cfi_offset 3, -24
 252              		.cfi_offset 4, -20
 253              		.cfi_offset 5, -16
 254              		.cfi_offset 6, -12
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257              	.LVL21:
  86:Src/bh1730.c  ****     
  87:Src/bh1730.c  ****   // set accuracy, default GAIN_X1
  88:Src/bh1730.c  ****   uint8_t gain = GAIN_X1;
  89:Src/bh1730.c  **** 
  90:Src/bh1730.c  ****   // set Gain
  91:Src/bh1730.c  ****   // setGain(gain);
  92:Src/bh1730.c  **** 
  93:Src/bh1730.c  ****   // Start one time measurement
  94:Src/bh1730.c  ****   BH1730_WriteReg(BH1730_REG_CONTROL, BH1730_REG_CONTROL_POWER | BH1730_REG_CONTROL_ADC_EN | BH1730
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 7


 258              		.loc 1 94 0
 259 0002 0B21     		movs	r1, #11
 260 0004 0020     		movs	r0, #0
 261 0006 FFF7FEFF 		bl	BH1730_WriteReg
 262              	.LVL22:
  95:Src/bh1730.c  ****   // uint8_t buf[2];
  96:Src/bh1730.c  ****   // buf[0] = (uint8_t) 0x80;
  97:Src/bh1730.c  ****   // buf[1] = (uint8_t) 0x0C;
  98:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, buf, 2, HAL_I2C_STATE_TIMEOUT);  
  99:Src/bh1730.c  ****   // HAL_Delay(10);
 100:Src/bh1730.c  **** 
 101:Src/bh1730.c  ****   // uint8_t value = 0; 
 102:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, ((uint8_t)0x14), 1, HAL_I2C_STATE_TIMEOUT);  
 103:Src/bh1730.c  ****   // HAL_I2C_Master_Transmit(&hi2c2, 0x52, 0x14, 1, HAL_I2C_STATE_TIMEOUT);  
 104:Src/bh1730.c  ****   // HAL_I2C_Master_Receive(&hi2c2, 0x52, &value, 1, HAL_I2C_STATE_TIMEOUT);
 105:Src/bh1730.c  ****   // BH1730_ReadReg(BH1730_REG_DATA0_LOW);
 106:Src/bh1730.c  ****   // OLED_ShowNum(0, 16, value, 8, 12, 1);
 107:Src/bh1730.c  ****   // OLED_ShowNum(0, 32, 105, 3, 12, 1);
 108:Src/bh1730.c  ****   // OLED_Refresh();
 109:Src/bh1730.c  ****   // HAL_Delay(1000);
 110:Src/bh1730.c  ****   // OLED_Clear(); 
 111:Src/bh1730.c  **** 
 112:Src/bh1730.c  ****   // Wait for ADC data is valid
 113:Src/bh1730.c  **** 
 114:Src/bh1730.c  ****   // while(((read8(BH1730_REG_CONTROL) & BH1730_REG_CONTROL_ADC_VALID) == 0) && ++ret < BH1730_RET_
 115:Src/bh1730.c  ****   // HAL_Delay(10);
 116:Src/bh1730.c  ****   //   // delay(10);
 117:Src/bh1730.c  ****   // }
 118:Src/bh1730.c  **** 
 119:Src/bh1730.c  ****   // if(ret == BH1730_RET_TIMEOUT){
 120:Src/bh1730.c  ****   // #if BH1730_DEBUG == 1
 121:Src/bh1730.c  ****   //   Serial.println("Read timed out");
 122:Src/bh1730.c  ****   // #endif
 123:Src/bh1730.c  ****   //   return -1;
 124:Src/bh1730.c  ****   // }
 125:Src/bh1730.c  **** 
 126:Src/bh1730.c  ****   // Read real light and IR light from registers  
 127:Src/bh1730.c  ****   // uint32_t result;
 128:Src/bh1730.c  ****   uint8_t data0_lb, data0_mb, data1_lb, data1_mb;
 129:Src/bh1730.c  ****   data0_lb = BH1730_ReadReg(BH1730_REG_DATA0_LOW);
 263              		.loc 1 129 0
 264 000a 1420     		movs	r0, #20
 265 000c FFF7FEFF 		bl	BH1730_ReadReg
 266              	.LVL23:
 267 0010 0500     		movs	r5, r0
 268              	.LVL24:
 130:Src/bh1730.c  ****   data0_mb = BH1730_ReadReg(BH1730_REG_DATA0_HIGH);
 269              		.loc 1 130 0
 270 0012 1520     		movs	r0, #21
 271 0014 FFF7FEFF 		bl	BH1730_ReadReg
 272              	.LVL25:
 273 0018 0400     		movs	r4, r0
 274              	.LVL26:
 131:Src/bh1730.c  ****   data1_lb = BH1730_ReadReg(BH1730_REG_DATA1_LOW); 
 275              		.loc 1 131 0
 276 001a 1620     		movs	r0, #22
 277 001c FFF7FEFF 		bl	BH1730_ReadReg
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 8


 278              	.LVL27:
 279 0020 0600     		movs	r6, r0
 280              	.LVL28:
 132:Src/bh1730.c  ****   data1_mb = BH1730_ReadReg(BH1730_REG_DATA1_HIGH); 
 281              		.loc 1 132 0
 282 0022 1720     		movs	r0, #23
 283 0024 FFF7FEFF 		bl	BH1730_ReadReg
 284              	.LVL29:
 133:Src/bh1730.c  **** 
 134:Src/bh1730.c  ****   // OLED_ShowNum(0, 0, data0_lb, 8, 12, 1);
 135:Src/bh1730.c  ****   // OLED_Refresh();
 136:Src/bh1730.c  ****   // HAL_Delay(1000);
 137:Src/bh1730.c  ****   // OLED_Clear();
 138:Src/bh1730.c  ****   // Calculate lux based on formula in datasheet.
 139:Src/bh1730.c  ****   uint16_t data0, data1;
 140:Src/bh1730.c  ****   data0 = (data0_mb << 8 ) + data0_lb;
 285              		.loc 1 140 0
 286 0028 2402     		lsls	r4, r4, #8
 287              	.LVL30:
 288 002a 6519     		adds	r5, r4, r5
 289              	.LVL31:
 290 002c ACB2     		uxth	r4, r5
 291              	.LVL32:
 141:Src/bh1730.c  ****   data1 = (data1_mb << 8 ) + data1_lb;
 292              		.loc 1 141 0
 293 002e 0502     		lsls	r5, r0, #8
 294 0030 AE19     		adds	r6, r5, r6
 295              	.LVL33:
 296 0032 B5B2     		uxth	r5, r6
 297              	.LVL34:
 142:Src/bh1730.c  ****   // OLED_ShowNum(0, 0, data0, 9, 12, 1);
 143:Src/bh1730.c  ****   // OLED_ShowNum(0, 22, data1, 9, 12, 1);
 144:Src/bh1730.c  ****   // OLED_Refresh();
 145:Src/bh1730.c  ****   // HAL_Delay(1000);
 146:Src/bh1730.c  ****   // OLED_Clear();
 147:Src/bh1730.c  **** 
 148:Src/bh1730.c  ****   if(data0 == 0)return 0;
 298              		.loc 1 148 0
 299 0034 002C     		cmp	r4, #0
 300 0036 00D1     		bne	.LCB228
 301 0038 AAE0     		b	.L22	@long jump
 302              	.LCB228:
 303              	.LVL35:
 149:Src/bh1730.c  ****   
 150:Src/bh1730.c  ****   uint32_t lx = 0;
 151:Src/bh1730.c  ****   uint32_t div = data1/data0;
 304              		.loc 1 151 0
 305 003a 2100     		movs	r1, r4
 306 003c 2800     		movs	r0, r5
 307              	.LVL36:
 308 003e FFF7FEFF 		bl	__aeabi_uidiv
 309              	.LVL37:
 310 0042 80B2     		uxth	r0, r0
 311              	.LVL38:
 152:Src/bh1730.c  **** 
 153:Src/bh1730.c  **** 
 154:Src/bh1730.c  ****   if(div < 0.26) {
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 9


 312              		.loc 1 154 0
 313 0044 FFF7FEFF 		bl	__aeabi_ui2d
 314              	.LVL39:
 315 0048 0600     		movs	r6, r0
 316 004a 0F00     		movs	r7, r1
 317 004c 524A     		ldr	r2, .L32
 318 004e 534B     		ldr	r3, .L32+4
 319 0050 FFF7FEFF 		bl	__aeabi_dcmplt
 320              	.LVL40:
 321 0054 0028     		cmp	r0, #0
 322 0056 20D0     		beq	.L28
 155:Src/bh1730.c  ****       lx = ((1.29 * data0) - (2.733 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 323              		.loc 1 155 0
 324 0058 2000     		movs	r0, r4
 325 005a FFF7FEFF 		bl	__aeabi_i2d
 326              	.LVL41:
 327 005e 4E4A     		ldr	r2, .L32
 328 0060 4F4B     		ldr	r3, .L32+8
 329 0062 FFF7FEFF 		bl	__aeabi_dmul
 330              	.LVL42:
 331 0066 0600     		movs	r6, r0
 332 0068 0F00     		movs	r7, r1
 333 006a 2800     		movs	r0, r5
 334 006c FFF7FEFF 		bl	__aeabi_i2d
 335              	.LVL43:
 336 0070 4C4A     		ldr	r2, .L32+12
 337 0072 4D4B     		ldr	r3, .L32+16
 338 0074 FFF7FEFF 		bl	__aeabi_dmul
 339              	.LVL44:
 340 0078 0200     		movs	r2, r0
 341 007a 0B00     		movs	r3, r1
 342 007c 3000     		movs	r0, r6
 343 007e 3900     		movs	r1, r7
 344 0080 FFF7FEFF 		bl	__aeabi_dsub
 345              	.LVL45:
 346 0084 494A     		ldr	r2, .L32+20
 347 0086 4A4B     		ldr	r3, .L32+24
 348 0088 FFF7FEFF 		bl	__aeabi_dmul
 349              	.LVL46:
 350 008c 494A     		ldr	r2, .L32+28
 351 008e 4A4B     		ldr	r3, .L32+32
 352 0090 FFF7FEFF 		bl	__aeabi_ddiv
 353              	.LVL47:
 354 0094 FFF7FEFF 		bl	__aeabi_d2uiz
 355              	.LVL48:
 356 0098 7DE0     		b	.L14
 357              	.LVL49:
 358              	.L28:
 156:Src/bh1730.c  ****   }else if(div < 0.55) {
 359              		.loc 1 156 0
 360 009a 484A     		ldr	r2, .L32+36
 361 009c 484B     		ldr	r3, .L32+40
 362 009e 3000     		movs	r0, r6
 363 00a0 3900     		movs	r1, r7
 364 00a2 FFF7FEFF 		bl	__aeabi_dcmplt
 365              	.LVL50:
 366 00a6 0028     		cmp	r0, #0
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 10


 367 00a8 20D0     		beq	.L29
 157:Src/bh1730.c  ****       lx = ((0.795 * data0) - (0.859 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 368              		.loc 1 157 0
 369 00aa 2000     		movs	r0, r4
 370 00ac FFF7FEFF 		bl	__aeabi_i2d
 371              	.LVL51:
 372 00b0 444A     		ldr	r2, .L32+44
 373 00b2 454B     		ldr	r3, .L32+48
 374 00b4 FFF7FEFF 		bl	__aeabi_dmul
 375              	.LVL52:
 376 00b8 0600     		movs	r6, r0
 377 00ba 0F00     		movs	r7, r1
 378 00bc 2800     		movs	r0, r5
 379 00be FFF7FEFF 		bl	__aeabi_i2d
 380              	.LVL53:
 381 00c2 424A     		ldr	r2, .L32+52
 382 00c4 424B     		ldr	r3, .L32+56
 383 00c6 FFF7FEFF 		bl	__aeabi_dmul
 384              	.LVL54:
 385 00ca 0200     		movs	r2, r0
 386 00cc 0B00     		movs	r3, r1
 387 00ce 3000     		movs	r0, r6
 388 00d0 3900     		movs	r1, r7
 389 00d2 FFF7FEFF 		bl	__aeabi_dsub
 390              	.LVL55:
 391 00d6 354A     		ldr	r2, .L32+20
 392 00d8 354B     		ldr	r3, .L32+24
 393 00da FFF7FEFF 		bl	__aeabi_dmul
 394              	.LVL56:
 395 00de 354A     		ldr	r2, .L32+28
 396 00e0 354B     		ldr	r3, .L32+32
 397 00e2 FFF7FEFF 		bl	__aeabi_ddiv
 398              	.LVL57:
 399 00e6 FFF7FEFF 		bl	__aeabi_d2uiz
 400              	.LVL58:
 401 00ea 54E0     		b	.L14
 402              	.LVL59:
 403              	.L29:
 158:Src/bh1730.c  ****   }else if(div < 1.09) {
 404              		.loc 1 158 0
 405 00ec 354A     		ldr	r2, .L32+44
 406 00ee 394B     		ldr	r3, .L32+60
 407 00f0 3000     		movs	r0, r6
 408 00f2 3900     		movs	r1, r7
 409 00f4 FFF7FEFF 		bl	__aeabi_dcmplt
 410              	.LVL60:
 411 00f8 0028     		cmp	r0, #0
 412 00fa 20D0     		beq	.L30
 159:Src/bh1730.c  ****       lx = ((0.51 * data0) - (0.345 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 413              		.loc 1 159 0
 414 00fc 2000     		movs	r0, r4
 415 00fe FFF7FEFF 		bl	__aeabi_i2d
 416              	.LVL61:
 417 0102 354A     		ldr	r2, .L32+64
 418 0104 354B     		ldr	r3, .L32+68
 419 0106 FFF7FEFF 		bl	__aeabi_dmul
 420              	.LVL62:
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 11


 421 010a 0600     		movs	r6, r0
 422 010c 0F00     		movs	r7, r1
 423 010e 2800     		movs	r0, r5
 424 0110 FFF7FEFF 		bl	__aeabi_i2d
 425              	.LVL63:
 426 0114 324A     		ldr	r2, .L32+72
 427 0116 334B     		ldr	r3, .L32+76
 428 0118 FFF7FEFF 		bl	__aeabi_dmul
 429              	.LVL64:
 430 011c 0200     		movs	r2, r0
 431 011e 0B00     		movs	r3, r1
 432 0120 3000     		movs	r0, r6
 433 0122 3900     		movs	r1, r7
 434 0124 FFF7FEFF 		bl	__aeabi_dsub
 435              	.LVL65:
 436 0128 204A     		ldr	r2, .L32+20
 437 012a 214B     		ldr	r3, .L32+24
 438 012c FFF7FEFF 		bl	__aeabi_dmul
 439              	.LVL66:
 440 0130 204A     		ldr	r2, .L32+28
 441 0132 214B     		ldr	r3, .L32+32
 442 0134 FFF7FEFF 		bl	__aeabi_ddiv
 443              	.LVL67:
 444 0138 FFF7FEFF 		bl	__aeabi_d2uiz
 445              	.LVL68:
 446 013c 2BE0     		b	.L14
 447              	.LVL69:
 448              	.L30:
 160:Src/bh1730.c  ****   }else if(div < 2.13) {
 449              		.loc 1 160 0
 450 013e 2A4A     		ldr	r2, .L32+80
 451 0140 2A4B     		ldr	r3, .L32+84
 452 0142 3000     		movs	r0, r6
 453 0144 3900     		movs	r1, r7
 454 0146 FFF7FEFF 		bl	__aeabi_dcmplt
 455              	.LVL70:
 456 014a 0028     		cmp	r0, #0
 457 014c 22D0     		beq	.L31
 161:Src/bh1730.c  ****       lx = ((0.276 * data0) - (0.13 * data1)) / gain * 102.6 / BH1730_ITIME_MS;
 458              		.loc 1 161 0
 459 014e 2000     		movs	r0, r4
 460 0150 FFF7FEFF 		bl	__aeabi_i2d
 461              	.LVL71:
 462 0154 264A     		ldr	r2, .L32+88
 463 0156 274B     		ldr	r3, .L32+92
 464 0158 FFF7FEFF 		bl	__aeabi_dmul
 465              	.LVL72:
 466 015c 0600     		movs	r6, r0
 467 015e 0F00     		movs	r7, r1
 468 0160 2800     		movs	r0, r5
 469 0162 FFF7FEFF 		bl	__aeabi_i2d
 470              	.LVL73:
 471 0166 0C4A     		ldr	r2, .L32
 472 0168 234B     		ldr	r3, .L32+96
 473 016a FFF7FEFF 		bl	__aeabi_dmul
 474              	.LVL74:
 475 016e 0200     		movs	r2, r0
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 12


 476 0170 0B00     		movs	r3, r1
 477 0172 3000     		movs	r0, r6
 478 0174 3900     		movs	r1, r7
 479 0176 FFF7FEFF 		bl	__aeabi_dsub
 480              	.LVL75:
 481 017a 0C4A     		ldr	r2, .L32+20
 482 017c 0C4B     		ldr	r3, .L32+24
 483 017e FFF7FEFF 		bl	__aeabi_dmul
 484              	.LVL76:
 485 0182 0C4A     		ldr	r2, .L32+28
 486 0184 0C4B     		ldr	r3, .L32+32
 487 0186 FFF7FEFF 		bl	__aeabi_ddiv
 488              	.LVL77:
 489 018a FFF7FEFF 		bl	__aeabi_d2uiz
 490              	.LVL78:
 491 018e 02E0     		b	.L14
 492              	.LVL79:
 493              	.L22:
 148:Src/bh1730.c  ****   
 494              		.loc 1 148 0
 495 0190 0020     		movs	r0, #0
 496              	.LVL80:
 497 0192 00E0     		b	.L14
 498              	.LVL81:
 499              	.L31:
 150:Src/bh1730.c  ****   uint32_t div = data1/data0;
 500              		.loc 1 150 0
 501 0194 0020     		movs	r0, #0
 502              	.LVL82:
 503              	.L14:
 162:Src/bh1730.c  ****   }
 163:Src/bh1730.c  **** 
 164:Src/bh1730.c  ****   return lx;
 165:Src/bh1730.c  **** }...
 504              		.loc 1 165 0
 505              		@ sp needed
 506              	.LVL83:
 507              	.LVL84:
 508 0196 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 509              	.L33:
 510              		.align	2
 511              	.L32:
 512 0198 A4703D0A 		.word	171798692
 513 019c D7A3D03F 		.word	1070638039
 514 01a0 D7A3F43F 		.word	1072997335
 515 01a4 77BE9F1A 		.word	446676599
 516 01a8 2FDD0540 		.word	1074126127
 517 01ac 66666666 		.word	1717986918
 518 01b0 66A65940 		.word	1079617126
 519 01b4 4DF38E53 		.word	1401877325
 520 01b8 74A45940 		.word	1079616628
 521 01bc 9A999999 		.word	-1717986918
 522 01c0 9999E13F 		.word	1071749529
 523 01c4 713D0AD7 		.word	-687194767
 524 01c8 A370E93F 		.word	1072263331
 525 01cc B0726891 		.word	-1855425872
 526 01d0 ED7CEB3F 		.word	1072397549
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 13


 527 01d4 A370F13F 		.word	1072787619
 528 01d8 52B81E85 		.word	-2061584302
 529 01dc EB51E03F 		.word	1071665643
 530 01e0 14AE47E1 		.word	-515396076
 531 01e4 7A14D63F 		.word	1070994554
 532 01e8 0AD7A370 		.word	1889785610
 533 01ec 3D0A0140 		.word	1073809981
 534 01f0 448B6CE7 		.word	-412316860
 535 01f4 FBA9D13F 		.word	1070705147
 536 01f8 D7A3C03F 		.word	1069589463
 537              		.cfi_endproc
 538              	.LFE44:
 540              		.text
 541              	.Letext0:
 542              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 543              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 544              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x8.h"
 545              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 546              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 547              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 548              		.file 8 "Inc/i2c.h"
ARM GAS  C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 bh1730.c
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:20     .text.BH1730_WriteReg:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:24     .text.BH1730_WriteReg:00000000 BH1730_WriteReg
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:65     .text.BH1730_WriteReg:00000024 $d
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:70     .text.BH1730_ReadReg:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:74     .text.BH1730_ReadReg:00000000 BH1730_ReadReg
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:129    .text.BH1730_ReadReg:0000003c $d
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:134    .text.BH1730_init:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:139    .text.BH1730_init:00000000 BH1730_init
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:162    .text.setGain:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:167    .text.setGain:00000000 setGain
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:237    .text.BH1730_GetLux:00000000 $t
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:242    .text.BH1730_GetLux:00000000 BH1730_GetLux
C:\Users\bnusw\AppData\Local\Temp\cc9Uanmm.s:512    .text.BH1730_GetLux:00000198 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_I2C_Master_Transmit
hi2c2
HAL_I2C_Master_Receive
__aeabi_uidiv
__aeabi_ui2d
__aeabi_dcmplt
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_d2uiz
